import pandas as pd
from bertopic.vectorizers import ClassTfidfTransformer
from bertopic import BERTopic


def clean_categories_column(df):
    """
    Clean the 'categories' column by removing language prefixes.

    Parameters:
    - df (DataFrame): The input DataFrame.

    Returns:
    - df (DataFrame): The DataFrame with cleaned 'categories' column.
    """
    print("\n\n Cleaning categories column")
    # For now, we are dropping the categories which are NaN
    # This can be set as test data or during the re-training process
    # this data can be slowly moved into train

    df = df.dropna(subset=["categories"])
    language_list = ["en", "de", "it", "fr"]
    for language_code in language_list:
        df["categories"] = df["categories"].str.replace(language_code, "")

    return df


def separate_multi_and_single_label(df, column_name="categories"):
    """
    Separate the DataFrame into two based on whether categories contain multiple labels.

    Parameters:
    - df (DataFrame): The input DataFrame.
    - column_name: The column by which the split has to happen. Defaults to 'categories'

    Returns:
    - multi_label_df (DataFrame): DataFrame containing rows with multiple labels in 'categories'.
    - single_label_df (DataFrame): DataFrame containing rows with single label in 'categories'.
    """
    print("Separating Multi and Single Labels by column : ")
    multi_label_df = df[df[column_name].str.contains(",")]
    single_label_df = df[~df[column_name].str.contains(",")]
    print("Multi Label DF: ", multi_label_df.shape)
    print("Single Label DF: ", single_label_df.shape)
    return multi_label_df, single_label_df


def create_topic_model(column, nr_topics=10):
    """
    Create a BERTopic model and fit it to the data.

    Parameters:
    - column (pd.Series): The input series.
    - nr_topics (int): Number of topics. Default is 10.

    Returns:
    - topic_model: The trained BERTopic model.
    - topics: Topics generated by the model.
    """
    print("Performing Topic modeling")
    ctfidf_model = ClassTfidfTransformer(reduce_frequent_words=True)
    topic_model = BERTopic(verbose=True, nr_topics=nr_topics, ctfidf_model=ctfidf_model)
    topics, _ = topic_model.fit_transform(column)
    return topic_model, topics


def predict_categories(topic_model, unique_categories, assigned_topics_df):
    """
    Predict categories using the trained BERTopic model.

    Parameters:
    - topic_model: The trained BERTopic model.
    - unique_categories: Unique categories.
    - assigned_topics_df: DataFrame containing assigned topics.

    Returns:
    - predicted_categories_df: DataFrame with predicted categories.
    """
    print("Predicting Categories")
    topic_of_each_row = topic_model.transform(unique_categories)
    predicted_categories_df = pd.DataFrame(
        {"id": topic_of_each_row[0], "categories": unique_categories}
    )
    print("ASsingning Lables")
    predicted_categories_df = pd.merge(
        left=predicted_categories_df, right=assigned_topics_df, on=["id"], how="inner"
    )
    predicted_categories_df.drop("id", axis=1, inplace=True)
    return predicted_categories_df


def merge_categories_with_original_df(df, predicted_df, column_name="categories"):
    """
    Merge predicted categories with the original DataFrame.

    Parameters:
    - df (DataFrame): Original DataFrame.
    - predicted_df (DataFrame): DataFrame with predicted output.
    - column_name(str) : Name of the column to join. Defaults to categories.

    Returns:
    - single_label_df (DataFrame): Merged DataFrame.
    """
    print("Merging the topics with original dataframe")
    df = pd.merge(left=df, right=predicted_df, on=[column_name], how="inner")
    return df
